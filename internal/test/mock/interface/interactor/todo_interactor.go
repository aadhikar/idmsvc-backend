// Code generated by mockery v2.16.0. DO NOT EDIT.

package interactor

import (
	model "github.com/hmsidm/internal/domain/model"
	mock "github.com/stretchr/testify/mock"

	public "github.com/hmsidm/internal/api/public"
)

// TodoInteractor is an autogenerated mock type for the TodoInteractor type
type TodoInteractor struct {
	mock.Mock
}

// Create provides a mock function with given fields: params, body, out
func (_m *TodoInteractor) Create(params *public.CreateTodoParams, body *public.Todo, out *model.Todo) error {
	ret := _m.Called(params, body, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(*public.CreateTodoParams, *public.Todo, *model.Todo) error); ok {
		r0 = rf(params, body, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id, params, out
func (_m *TodoInteractor) Delete(id uint, params *public.DeleteTodoParams, out *uint) error {
	ret := _m.Called(id, params, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *public.DeleteTodoParams, *uint) error); ok {
		r0 = rf(id, params, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FullUpdate provides a mock function with given fields: id, params, in, out
func (_m *TodoInteractor) FullUpdate(id uint, params *public.UpdateTodoParams, in *public.Todo, out *model.Todo) error {
	ret := _m.Called(id, params, in, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *public.UpdateTodoParams, *public.Todo, *model.Todo) error); ok {
		r0 = rf(id, params, in, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: params, out
func (_m *TodoInteractor) GetById(params *uint, out *uint) error {
	ret := _m.Called(params, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint, *uint) error); ok {
		r0 = rf(params, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: params, offset, limit
func (_m *TodoInteractor) List(params *public.ListTodosParams, offset *int64, limit *int32) error {
	ret := _m.Called(params, offset, limit)

	var r0 error
	if rf, ok := ret.Get(0).(func(*public.ListTodosParams, *int64, *int32) error); ok {
		r0 = rf(params, offset, limit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PartialUpdate provides a mock function with given fields: id, params, in, out
func (_m *TodoInteractor) PartialUpdate(id uint, params *public.PartialUpdateTodoParams, in *public.Todo, out *model.Todo) error {
	ret := _m.Called(id, params, in, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *public.PartialUpdateTodoParams, *public.Todo, *model.Todo) error); ok {
		r0 = rf(id, params, in, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTodoInteractor interface {
	mock.TestingT
	Cleanup(func())
}

// NewTodoInteractor creates a new instance of TodoInteractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTodoInteractor(t mockConstructorTestingTNewTodoInteractor) *TodoInteractor {
	mock := &TodoInteractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
