// Code generated by mockery v2.16.0. DO NOT EDIT.

package interactor

import (
	identity "github.com/redhatinsights/platform-go-middlewares/identity"

	mock "github.com/stretchr/testify/mock"

	model "github.com/hmsidm/internal/domain/model"

	public "github.com/hmsidm/internal/api/public"
)

// DomainInteractor is an autogenerated mock type for the DomainInteractor type
type DomainInteractor struct {
	mock.Mock
}

// Create provides a mock function with given fields: params, body
func (_m *DomainInteractor) Create(params *public.CreateDomainParams, body *public.CreateDomain) (string, *model.Domain, error) {
	ret := _m.Called(params, body)

	var r0 string
	if rf, ok := ret.Get(0).(func(*public.CreateDomainParams, *public.CreateDomain) string); ok {
		r0 = rf(params, body)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *model.Domain
	if rf, ok := ret.Get(1).(func(*public.CreateDomainParams, *public.CreateDomain) *model.Domain); ok {
		r1 = rf(params, body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.Domain)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*public.CreateDomainParams, *public.CreateDomain) error); ok {
		r2 = rf(params, body)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Delete provides a mock function with given fields: uuid, params
func (_m *DomainInteractor) Delete(uuid string, params *public.DeleteDomainParams) (string, string, error) {
	ret := _m.Called(uuid, params)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, *public.DeleteDomainParams) string); ok {
		r0 = rf(uuid, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, *public.DeleteDomainParams) string); ok {
		r1 = rf(uuid, params)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, *public.DeleteDomainParams) error); ok {
		r2 = rf(uuid, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetById provides a mock function with given fields: uuid, params
func (_m *DomainInteractor) GetById(uuid string, params *public.ReadDomainParams) (string, string, error) {
	ret := _m.Called(uuid, params)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, *public.ReadDomainParams) string); ok {
		r0 = rf(uuid, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, *public.ReadDomainParams) string); ok {
		r1 = rf(uuid, params)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, *public.ReadDomainParams) error); ok {
		r2 = rf(uuid, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// List provides a mock function with given fields: params
func (_m *DomainInteractor) List(params *public.ListDomainsParams) (string, int, int, error) {
	ret := _m.Called(params)

	var r0 string
	if rf, ok := ret.Get(0).(func(*public.ListDomainsParams) string); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*public.ListDomainsParams) int); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(*public.ListDomainsParams) int); ok {
		r2 = rf(params)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*public.ListDomainsParams) error); ok {
		r3 = rf(params)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// RegisterIpa provides a mock function with given fields: xrhid, params, body
func (_m *DomainInteractor) RegisterIpa(xrhid *identity.XRHID, params *public.RegisterIpaDomainParams, body *public.RegisterDomainIpa) (string, *model.Ipa, error) {
	ret := _m.Called(xrhid, params, body)

	var r0 string
	if rf, ok := ret.Get(0).(func(*identity.XRHID, *public.RegisterIpaDomainParams, *public.RegisterDomainIpa) string); ok {
		r0 = rf(xrhid, params, body)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *model.Ipa
	if rf, ok := ret.Get(1).(func(*identity.XRHID, *public.RegisterIpaDomainParams, *public.RegisterDomainIpa) *model.Ipa); ok {
		r1 = rf(xrhid, params, body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.Ipa)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*identity.XRHID, *public.RegisterIpaDomainParams, *public.RegisterDomainIpa) error); ok {
		r2 = rf(xrhid, params, body)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewDomainInteractor interface {
	mock.TestingT
	Cleanup(func())
}

// NewDomainInteractor creates a new instance of DomainInteractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDomainInteractor(t mockConstructorTestingTNewDomainInteractor) *DomainInteractor {
	mock := &DomainInteractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
