// Code generated by mockery v2.16.0. DO NOT EDIT.

package presenter

import (
	model "github.com/hmsidm/internal/domain/model"
	mock "github.com/stretchr/testify/mock"

	public "github.com/hmsidm/internal/api/public"
)

// TodoPresenter is an autogenerated mock type for the TodoPresenter type
type TodoPresenter struct {
	mock.Mock
}

// Create provides a mock function with given fields: in, out
func (_m *TodoPresenter) Create(in *model.Todo, out *public.Todo) error {
	ret := _m.Called(in, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Todo, *public.Todo) error); ok {
		r0 = rf(in, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FullUpdate provides a mock function with given fields: in, out
func (_m *TodoPresenter) FullUpdate(in *model.Todo, out *public.Todo) error {
	ret := _m.Called(in, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Todo, *public.Todo) error); ok {
		r0 = rf(in, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: in, out
func (_m *TodoPresenter) Get(in *model.Todo, out *public.Todo) error {
	ret := _m.Called(in, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Todo, *public.Todo) error); ok {
		r0 = rf(in, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: prefix, offset, count, data, out
func (_m *TodoPresenter) List(prefix string, offset int64, count int32, data []model.Todo, out *public.ListTodo) error {
	ret := _m.Called(prefix, offset, count, data, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64, int32, []model.Todo, *public.ListTodo) error); ok {
		r0 = rf(prefix, offset, count, data, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PartialUpdate provides a mock function with given fields: in, out
func (_m *TodoPresenter) PartialUpdate(in *model.Todo, out *public.Todo) error {
	ret := _m.Called(in, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Todo, *public.Todo) error); ok {
		r0 = rf(in, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTodoPresenter interface {
	mock.TestingT
	Cleanup(func())
}

// NewTodoPresenter creates a new instance of TodoPresenter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTodoPresenter(t mockConstructorTestingTNewTodoPresenter) *TodoPresenter {
	mock := &TodoPresenter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
