// Code generated by mockery v2.16.0. DO NOT EDIT.

package repository

import (
	model "github.com/hmsidm/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// DomainRepository is an autogenerated mock type for the DomainRepository type
type DomainRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: db, orgId, data
func (_m *DomainRepository) Create(db *gorm.DB, orgId string, data *model.Domain) error {
	ret := _m.Called(db, orgId, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, *model.Domain) error); ok {
		r0 = rf(db, orgId, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteById provides a mock function with given fields: db, orgId, uuid
func (_m *DomainRepository) DeleteById(db *gorm.DB, orgId string, uuid string) error {
	ret := _m.Called(db, orgId, uuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, string) error); ok {
		r0 = rf(db, orgId, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: db, orgId, offset, count
func (_m *DomainRepository) FindAll(db *gorm.DB, orgId string, offset int64, count int32) ([]model.Domain, error) {
	ret := _m.Called(db, orgId, offset, count)

	var r0 []model.Domain
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, int64, int32) []model.Domain); ok {
		r0 = rf(db, orgId, offset, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, string, int64, int32) error); ok {
		r1 = rf(db, orgId, offset, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: db, orgId, uuid
func (_m *DomainRepository) FindById(db *gorm.DB, orgId string, uuid string) (model.Domain, error) {
	ret := _m.Called(db, orgId, uuid)

	var r0 model.Domain
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, string) model.Domain); ok {
		r0 = rf(db, orgId, uuid)
	} else {
		r0 = ret.Get(0).(model.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, string, string) error); ok {
		r1 = rf(db, orgId, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: db, orgId, data
func (_m *DomainRepository) Update(db *gorm.DB, orgId string, data *model.Domain) (model.Domain, error) {
	ret := _m.Called(db, orgId, data)

	var r0 model.Domain
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, *model.Domain) model.Domain); ok {
		r0 = rf(db, orgId, data)
	} else {
		r0 = ret.Get(0).(model.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, string, *model.Domain) error); ok {
		r1 = rf(db, orgId, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDomainRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewDomainRepository creates a new instance of DomainRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDomainRepository(t mockConstructorTestingTNewDomainRepository) *DomainRepository {
	mock := &DomainRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
