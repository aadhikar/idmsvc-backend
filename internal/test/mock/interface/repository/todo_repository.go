// Code generated by mockery v2.16.0. DO NOT EDIT.

package repository

import (
	model "github.com/hmsidm/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: db, data
func (_m *TodoRepository) Create(db *gorm.DB, data *model.Todo) error {
	ret := _m.Called(db, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.Todo) error); ok {
		r0 = rf(db, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteById provides a mock function with given fields: db, id
func (_m *TodoRepository) DeleteById(db *gorm.DB, id uint) error {
	ret := _m.Called(db, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) error); ok {
		r0 = rf(db, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: db, offset, count
func (_m *TodoRepository) FindAll(db *gorm.DB, offset int64, count int32) ([]model.Todo, error) {
	ret := _m.Called(db, offset, count)

	var r0 []model.Todo
	if rf, ok := ret.Get(0).(func(*gorm.DB, int64, int32) []model.Todo); ok {
		r0 = rf(db, offset, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, int64, int32) error); ok {
		r1 = rf(db, offset, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: db, id
func (_m *TodoRepository) FindById(db *gorm.DB, id uint) (model.Todo, error) {
	ret := _m.Called(db, id)

	var r0 model.Todo
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) model.Todo); ok {
		r0 = rf(db, id)
	} else {
		r0 = ret.Get(0).(model.Todo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartialUpdate provides a mock function with given fields: db, data
func (_m *TodoRepository) PartialUpdate(db *gorm.DB, data *model.Todo) (model.Todo, error) {
	ret := _m.Called(db, data)

	var r0 model.Todo
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.Todo) model.Todo); ok {
		r0 = rf(db, data)
	} else {
		r0 = ret.Get(0).(model.Todo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.Todo) error); ok {
		r1 = rf(db, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: db, data
func (_m *TodoRepository) Update(db *gorm.DB, data *model.Todo) (model.Todo, error) {
	ret := _m.Called(db, data)

	var r0 model.Todo
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.Todo) model.Todo); ok {
		r0 = rf(db, data)
	} else {
		r0 = ret.Get(0).(model.Todo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.Todo) error); ok {
		r1 = rf(db, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTodoRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTodoRepository creates a new instance of TodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTodoRepository(t mockConstructorTestingTNewTodoRepository) *TodoRepository {
	mock := &TodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
