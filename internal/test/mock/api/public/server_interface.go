// Code generated by mockery v2.16.0. DO NOT EDIT.

package public

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	public "github.com/podengo-project/idmsvc-backend/internal/api/public"

	uuid "github.com/google/uuid"
)

// ServerInterface is an autogenerated mock type for the ServerInterface type
type ServerInterface struct {
	mock.Mock
}

// CreateDomain provides a mock function with given fields: ctx, params
func (_m *ServerInterface) CreateDomain(ctx echo.Context, params public.CreateDomainParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, public.CreateDomainParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDomainToken provides a mock function with given fields: ctx, params
func (_m *ServerInterface) CreateDomainToken(ctx echo.Context, params public.CreateDomainTokenParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, public.CreateDomainTokenParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDomain provides a mock function with given fields: ctx, _a1, params
func (_m *ServerInterface) DeleteDomain(ctx echo.Context, _a1 string, params public.DeleteDomainParams) error {
	ret := _m.Called(ctx, _a1, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, public.DeleteDomainParams) error); ok {
		r0 = rf(ctx, _a1, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HostConf provides a mock function with given fields: ctx, inventoryId, fqdn, params
func (_m *ServerInterface) HostConf(ctx echo.Context, inventoryId uuid.UUID, fqdn string, params public.HostConfParams) error {
	ret := _m.Called(ctx, inventoryId, fqdn, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, uuid.UUID, string, public.HostConfParams) error); ok {
		r0 = rf(ctx, inventoryId, fqdn, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDomains provides a mock function with given fields: ctx, params
func (_m *ServerInterface) ListDomains(ctx echo.Context, params public.ListDomainsParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, public.ListDomainsParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadDomain provides a mock function with given fields: ctx, _a1, params
func (_m *ServerInterface) ReadDomain(ctx echo.Context, _a1 string, params public.ReadDomainParams) error {
	ret := _m.Called(ctx, _a1, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, public.ReadDomainParams) error); ok {
		r0 = rf(ctx, _a1, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterDomain provides a mock function with given fields: ctx, _a1, params
func (_m *ServerInterface) RegisterDomain(ctx echo.Context, _a1 string, params public.RegisterDomainParams) error {
	ret := _m.Called(ctx, _a1, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, public.RegisterDomainParams) error); ok {
		r0 = rf(ctx, _a1, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDomain provides a mock function with given fields: ctx, _a1, params
func (_m *ServerInterface) UpdateDomain(ctx echo.Context, _a1 string, params public.UpdateDomainParams) error {
	ret := _m.Called(ctx, _a1, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, public.UpdateDomainParams) error); ok {
		r0 = rf(ctx, _a1, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewServerInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewServerInterface creates a new instance of ServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServerInterface(t mockConstructorTestingTNewServerInterface) *ServerInterface {
	mock := &ServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
