// Code generated by mockery v2.16.0. DO NOT EDIT.

package handler

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	public "github.com/hmsidm/internal/api/public"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: ctx, params
func (_m *Application) CreateTodo(ctx echo.Context, params public.CreateTodoParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, public.CreateTodoParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTodo provides a mock function with given fields: ctx, id, params
func (_m *Application) DeleteTodo(ctx echo.Context, id uint, params public.DeleteTodoParams) error {
	ret := _m.Called(ctx, id, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint, public.DeleteTodoParams) error); ok {
		r0 = rf(ctx, id, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLivez provides a mock function with given fields: ctx
func (_m *Application) GetLivez(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMetrics provides a mock function with given fields: ctx
func (_m *Application) GetMetrics(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetReadyz provides a mock function with given fields: ctx
func (_m *Application) GetReadyz(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTodo provides a mock function with given fields: ctx, id, params
func (_m *Application) GetTodo(ctx echo.Context, id uint, params public.GetTodoParams) error {
	ret := _m.Called(ctx, id, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint, public.GetTodoParams) error); ok {
		r0 = rf(ctx, id, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListTodos provides a mock function with given fields: ctx, params
func (_m *Application) ListTodos(ctx echo.Context, params public.ListTodosParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, public.ListTodosParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PartialUpdateTodo provides a mock function with given fields: ctx, id, params
func (_m *Application) PartialUpdateTodo(ctx echo.Context, id uint, params public.PartialUpdateTodoParams) error {
	ret := _m.Called(ctx, id, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint, public.PartialUpdateTodoParams) error); ok {
		r0 = rf(ctx, id, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTodo provides a mock function with given fields: ctx, id, params
func (_m *Application) UpdateTodo(ctx echo.Context, id uint, params public.UpdateTodoParams) error {
	ret := _m.Called(ctx, id, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint, public.UpdateTodoParams) error); ok {
		r0 = rf(ctx, id, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewApplication interface {
	mock.TestingT
	Cleanup(func())
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApplication(t mockConstructorTestingTNewApplication) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
