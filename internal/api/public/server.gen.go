// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all Todos
	// (GET /todo)
	ListTodos(ctx echo.Context, params ListTodosParams) error
	// Create Todo
	// (POST /todo)
	CreateTodo(ctx echo.Context, params CreateTodoParams) error
	// Delete an existing Todo
	// (DELETE /todo/{id})
	DeleteTodo(ctx echo.Context, id Id, params DeleteTodoParams) error
	// Return a Todo resource
	// (GET /todo/{id})
	GetTodo(ctx echo.Context, id Id, params GetTodoParams) error
	// Modify an existing Todo
	// (PATCH /todo/{id})
	PartialUpdateTodo(ctx echo.Context, id Id, params PartialUpdateTodoParams) error
	// Replace an existing Todo
	// (PUT /todo/{id})
	UpdateTodo(ctx echo.Context, id Id, params UpdateTodoParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListTodos converts echo context to params.
func (w *ServerInterfaceWrapper) ListTodos(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTodosParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Rh-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Identity")]; found {
		var XRhIdentity XRhIdentity
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Identity", runtime.ParamLocationHeader, valueList[0], &XRhIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Identity: %s", err))
		}

		params.XRhIdentity = XRhIdentity
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Rh-Identity is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTodos(ctx, params)
	return err
}

// CreateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTodo(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTodoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Rh-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Identity")]; found {
		var XRhIdentity XRhIdentity
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Identity", runtime.ParamLocationHeader, valueList[0], &XRhIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Identity: %s", err))
		}

		params.XRhIdentity = XRhIdentity
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Rh-Identity is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTodo(ctx, params)
	return err
}

// DeleteTodo converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteTodoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Rh-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Identity")]; found {
		var XRhIdentity XRhIdentity
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Identity", runtime.ParamLocationHeader, valueList[0], &XRhIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Identity: %s", err))
		}

		params.XRhIdentity = XRhIdentity
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Rh-Identity is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTodo(ctx, id, params)
	return err
}

// GetTodo converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTodoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Rh-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Identity")]; found {
		var XRhIdentity XRhIdentity
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Identity", runtime.ParamLocationHeader, valueList[0], &XRhIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Identity: %s", err))
		}

		params.XRhIdentity = XRhIdentity
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Rh-Identity is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTodo(ctx, id, params)
	return err
}

// PartialUpdateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) PartialUpdateTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PartialUpdateTodoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Rh-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Identity")]; found {
		var XRhIdentity XRhIdentity
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Identity", runtime.ParamLocationHeader, valueList[0], &XRhIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Identity: %s", err))
		}

		params.XRhIdentity = XRhIdentity
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Rh-Identity is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PartialUpdateTodo(ctx, id, params)
	return err
}

// UpdateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateTodoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Rh-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Identity")]; found {
		var XRhIdentity XRhIdentity
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Identity", runtime.ParamLocationHeader, valueList[0], &XRhIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Identity: %s", err))
		}

		params.XRhIdentity = XRhIdentity
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Rh-Identity is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTodo(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/todo", wrapper.ListTodos)
	router.POST(baseURL+"/todo", wrapper.CreateTodo)
	router.DELETE(baseURL+"/todo/:id", wrapper.DeleteTodo)
	router.GET(baseURL+"/todo/:id", wrapper.GetTodo)
	router.PATCH(baseURL+"/todo/:id", wrapper.PartialUpdateTodo)
	router.PUT(baseURL+"/todo/:id", wrapper.UpdateTodo)

}
