// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check a host vm before auto-enroll into the domain.
	// (POST /check-host/{subscription_manager_id}/{fqdn})
	CheckHost(ctx echo.Context, subscriptionManagerId string, fqdn string, params CheckHostParams) error
	// List domains in the organization
	// (GET /domains)
	ListDomains(ctx echo.Context, params ListDomainsParams) error
	// Create a domain.
	// (POST /domains)
	CreateDomain(ctx echo.Context, params CreateDomainParams) error
	// Delete domain.
	// (DELETE /domains/{uuid})
	DeleteDomain(ctx echo.Context, uuid string, params DeleteDomainParams) error
	// Read a domain.
	// (GET /domains/{uuid})
	ReadDomain(ctx echo.Context, uuid string, params ReadDomainParams) error
	// Register an IPA domain.
	// (PUT /domains/{uuid}/ipa/register)
	RegisterIpaDomain(ctx echo.Context, uuid string, params RegisterIpaDomainParams) error
	// Get host vm information.
	// (POST /host-conf/{fqdn})
	HostConf(ctx echo.Context, fqdn string, params HostConfParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CheckHost converts echo context to params.
func (w *ServerInterfaceWrapper) CheckHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "subscription_manager_id" -------------
	var subscriptionManagerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "subscription_manager_id", runtime.ParamLocationPath, ctx.Param("subscription_manager_id"), &subscriptionManagerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscription_manager_id: %s", err))
	}

	// ------------- Path parameter "fqdn" -------------
	var fqdn string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fqdn", runtime.ParamLocationPath, ctx.Param("fqdn"), &fqdn)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fqdn: %s", err))
	}

	ctx.Set(X_rh_identityScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckHostParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Rh-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Identity")]; found {
		var XRhIdentity string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Identity", runtime.ParamLocationHeader, valueList[0], &XRhIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Identity: %s", err))
		}

		params.XRhIdentity = XRhIdentity
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Rh-Identity is required, but not found"))
	}
	// ------------- Optional header parameter "X-Rh-Insights-Request-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Insights-Request-Id")]; found {
		var XRhInsightsRequestId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Insights-Request-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Insights-Request-Id", runtime.ParamLocationHeader, valueList[0], &XRhInsightsRequestId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Insights-Request-Id: %s", err))
		}

		params.XRhInsightsRequestId = &XRhInsightsRequestId
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CheckHost(ctx, subscriptionManagerId, fqdn, params)
	return err
}

// ListDomains converts echo context to params.
func (w *ServerInterfaceWrapper) ListDomains(ctx echo.Context) error {
	var err error

	ctx.Set(X_rh_identityScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDomainsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Rh-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Identity")]; found {
		var XRhIdentity string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Identity", runtime.ParamLocationHeader, valueList[0], &XRhIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Identity: %s", err))
		}

		params.XRhIdentity = XRhIdentity
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Rh-Identity is required, but not found"))
	}
	// ------------- Optional header parameter "X-Rh-Insights-Request-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Insights-Request-Id")]; found {
		var XRhInsightsRequestId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Insights-Request-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Insights-Request-Id", runtime.ParamLocationHeader, valueList[0], &XRhInsightsRequestId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Insights-Request-Id: %s", err))
		}

		params.XRhInsightsRequestId = &XRhInsightsRequestId
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListDomains(ctx, params)
	return err
}

// CreateDomain converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDomain(ctx echo.Context) error {
	var err error

	ctx.Set(X_rh_identityScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateDomainParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Rh-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Identity")]; found {
		var XRhIdentity string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Identity", runtime.ParamLocationHeader, valueList[0], &XRhIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Identity: %s", err))
		}

		params.XRhIdentity = XRhIdentity
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Rh-Identity is required, but not found"))
	}
	// ------------- Optional header parameter "X-Rh-Insights-Request-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Insights-Request-Id")]; found {
		var XRhInsightsRequestId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Insights-Request-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Insights-Request-Id", runtime.ParamLocationHeader, valueList[0], &XRhInsightsRequestId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Insights-Request-Id: %s", err))
		}

		params.XRhInsightsRequestId = &XRhInsightsRequestId
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDomain(ctx, params)
	return err
}

// DeleteDomain converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(X_rh_identityScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteDomainParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Rh-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Identity")]; found {
		var XRhIdentity string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Identity", runtime.ParamLocationHeader, valueList[0], &XRhIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Identity: %s", err))
		}

		params.XRhIdentity = XRhIdentity
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Rh-Identity is required, but not found"))
	}
	// ------------- Optional header parameter "X-Rh-Insights-Request-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Insights-Request-Id")]; found {
		var XRhInsightsRequestId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Insights-Request-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Insights-Request-Id", runtime.ParamLocationHeader, valueList[0], &XRhInsightsRequestId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Insights-Request-Id: %s", err))
		}

		params.XRhInsightsRequestId = &XRhInsightsRequestId
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDomain(ctx, uuid, params)
	return err
}

// ReadDomain converts echo context to params.
func (w *ServerInterfaceWrapper) ReadDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(X_rh_identityScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadDomainParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Rh-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Identity")]; found {
		var XRhIdentity string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Identity", runtime.ParamLocationHeader, valueList[0], &XRhIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Identity: %s", err))
		}

		params.XRhIdentity = XRhIdentity
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Rh-Identity is required, but not found"))
	}
	// ------------- Optional header parameter "X-Rh-Insights-Request-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Insights-Request-Id")]; found {
		var XRhInsightsRequestId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Insights-Request-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Insights-Request-Id", runtime.ParamLocationHeader, valueList[0], &XRhInsightsRequestId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Insights-Request-Id: %s", err))
		}

		params.XRhInsightsRequestId = &XRhInsightsRequestId
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReadDomain(ctx, uuid, params)
	return err
}

// RegisterIpaDomain converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterIpaDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(X_rh_identityScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterIpaDomainParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Rh-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Identity")]; found {
		var XRhIdentity string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Identity", runtime.ParamLocationHeader, valueList[0], &XRhIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Identity: %s", err))
		}

		params.XRhIdentity = XRhIdentity
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Rh-Identity is required, but not found"))
	}
	// ------------- Required header parameter "X-Rh-Insights-Request-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Insights-Request-Id")]; found {
		var XRhInsightsRequestId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Insights-Request-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Insights-Request-Id", runtime.ParamLocationHeader, valueList[0], &XRhInsightsRequestId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Insights-Request-Id: %s", err))
		}

		params.XRhInsightsRequestId = XRhInsightsRequestId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Rh-Insights-Request-Id is required, but not found"))
	}
	// ------------- Required header parameter "X-Rh-IDM-Registration-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-IDM-Registration-Token")]; found {
		var XRhIDMRegistrationToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-IDM-Registration-Token, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-IDM-Registration-Token", runtime.ParamLocationHeader, valueList[0], &XRhIDMRegistrationToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-IDM-Registration-Token: %s", err))
		}

		params.XRhIDMRegistrationToken = XRhIDMRegistrationToken
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Rh-IDM-Registration-Token is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterIpaDomain(ctx, uuid, params)
	return err
}

// HostConf converts echo context to params.
func (w *ServerInterfaceWrapper) HostConf(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fqdn" -------------
	var fqdn string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fqdn", runtime.ParamLocationPath, ctx.Param("fqdn"), &fqdn)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fqdn: %s", err))
	}

	ctx.Set(X_rh_identityScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params HostConfParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Rh-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Identity")]; found {
		var XRhIdentity string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Identity", runtime.ParamLocationHeader, valueList[0], &XRhIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Identity: %s", err))
		}

		params.XRhIdentity = XRhIdentity
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Rh-Identity is required, but not found"))
	}
	// ------------- Optional header parameter "X-Rh-Insights-Request-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Rh-Insights-Request-Id")]; found {
		var XRhInsightsRequestId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Rh-Insights-Request-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Rh-Insights-Request-Id", runtime.ParamLocationHeader, valueList[0], &XRhInsightsRequestId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Rh-Insights-Request-Id: %s", err))
		}

		params.XRhInsightsRequestId = &XRhInsightsRequestId
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.HostConf(ctx, fqdn, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/check-host/:subscription_manager_id/:fqdn", wrapper.CheckHost)
	router.GET(baseURL+"/domains", wrapper.ListDomains)
	router.POST(baseURL+"/domains", wrapper.CreateDomain)
	router.DELETE(baseURL+"/domains/:uuid", wrapper.DeleteDomain)
	router.GET(baseURL+"/domains/:uuid", wrapper.ReadDomain)
	router.PUT(baseURL+"/domains/:uuid/ipa/register", wrapper.RegisterIpaDomain)
	router.POST(baseURL+"/host-conf/:fqdn", wrapper.HostConf)

}
