// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
