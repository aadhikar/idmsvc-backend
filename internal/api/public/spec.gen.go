// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
