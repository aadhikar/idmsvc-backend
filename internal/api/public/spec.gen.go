// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
