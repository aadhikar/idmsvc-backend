// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
