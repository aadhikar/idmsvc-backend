// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/dyU7lwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
