// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
