// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
