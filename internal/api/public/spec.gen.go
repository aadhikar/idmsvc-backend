// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
