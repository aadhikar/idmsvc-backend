// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
