// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8fcZvHFgAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
