// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"xUa/udr8XwAAAP//RUh+/rVfAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
