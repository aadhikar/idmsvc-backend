// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
