// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
