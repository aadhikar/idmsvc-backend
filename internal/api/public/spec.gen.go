// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//t9AkbChcAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
