// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"66LVy53MO9eorRyt+sXeuNEi685ULZYsZUny6hirT/lCsWS1i/mTQt84r4/JemTCCWlUm+NRE9nL+1av",
	"pMz6ypVxczcbjDOlYv7bxdn1c+6knj25qvWeaxfz3NWZ7CzkYuaqXG0N60bWMSdEp7X+OFuYd/RKrbke",
	"TkuLxiKvzzL3R8Vpt9WbN2eLImxXxoNOrzRwrl4ag/Nq5mY5JvO1clNfVyZEG+TXrWqnfztc3fau5Hm9",
	"MB/d19aZCnTc26kCRxmt/TzL31funo/y9ReaWemrwlRTO3djdP4ELybEucf48rZo2jfm7c35Yjy9WZ+Y",
	"bvm+67gXl6hb0Iu94nlpPXYyJXRGh0/N+4J8UbIpGp9kGmed9YT08rl2t5arV2+yfaLqY6dTKJ29aJW7",
	"gZbpqa/ynZu7rFrWcFEe3tSv66vq4j5XIlqpjMvl1tGzOiG1fo50v1WH8jet1GjSO1w15KNr3Shkj8xa",
	"t1pG5QstS+FLu7as9IelMX45e5lXVcMp6aPCN3o+IZXs3DSdvjpvd4xK5Uk1q43qybLdkHtyzSy2njrt",
	"1qxTqzCdVNvL3rhTg/LZRaV9WdTbdvFiMSHnuetxo2xfjojbGhZyZx1Z1G4um7XMsnfWkTs1WassG8yi",
	"+tmu3DvP1OReQ56dtzq1bGtCWO3GrDes1W61et29uL08qk9fq4OhfFRa6SfluU6r/YFcrc1mdm3WPKv1",
	"lJrc67126pXlVW/cnpDL5bhW692dd+RWqz2cZ9VzuXS1qlpKq0nH+aYLR7U5bF0/XZG+rhR6i3G+uZjm",
	"r9dKQ3iACYn4APmmLo+bcragFcc092ItLr59Wzaf1s60WD66rr++KDm00C5aef1GWfYyQ5jTJ8Sta8t8",
	"mb4+VV47w5VztF4aL68ZvNDNV7s/L1llfXTdv+/idt9d9OjZUV4bFzvqVcPFL0tYvalPSG+kjkfTwaUy",
	"qzXks+ZzTbnpzqZIKzdzhaKRyS5n3WyhPj2yh+eXJeVKzZ+/tletArrIZG/dC3g3Id/auWZlQe8vLty1",
	"LB8p3Xl3OC3UR92Rtn6u3h1d5XWLnN1dX9bL3bOmXKxdZ+9KHWfUoPMlnuVaEzJdn/Wel8+Lp6P2y72G",
	"FtnpN1Kzh+bitfjcv7bqtmP0hhpqPeHuUL64HdrGSQsWCpfLrF2CZ2tjQvCwNGgtlvZF8bI2b13eX8KM",
	"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",
	"/9pgoF5ZcgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
