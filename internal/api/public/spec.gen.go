// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"WdA39G8Pb/8fAAD//ya9KEB5dAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
