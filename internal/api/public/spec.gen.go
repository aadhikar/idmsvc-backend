// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Q6ljsXthcfao/xac20bUwjS5qafvbep9j+nV7OPEowZx1mx+h8jXd2jQKe05xvAn0VxCHsOHxtfW6z6b",
	"vsocPmnWcRD3HyqgR8Fjs8uXBLxnTT697Smq59XyuAsdtzHyxanoryHDT4FW094Ns6HST2FW094N85mI",
	"P4W7m/pO2K86h2PZfVO8dXbKVFTfHvQYHjiHppn4SJifrNGL1oFm4HuriUcr856UbfkZrTAp2QPL37Uj",
	"nZ32ds9dmh+tFx+tFx+tFx+tFx+tFx+tFx+tFx+tFx+tFx+tFx+tFx+tFx+tFx+tFx+tFx+tFx+tFx+t",
	"Fx+tFx+tFx+tFx+tFx+tFx+tFx+tF//RrRenbwh96yx3v3AqZ9vSvBP3d/7HNWfos5/VUP25A60/36Ex",
	"SsLtRZhhcxp6LMVh8STIz20c9G1h/nMNG3Z9yv9c1ngK8l3rpQL8cgPH4fWe2ws8/9wVn+/t0TgqfN9t",
	"7kxoKgZ3BfJJmQrFuijZi+szP/8m0ktC5XOv3e00snkld/2fXp/5rk6Ow6Pd1w+JT2j6qfq3gvmLPCzX",
	"VgW+kcfVeR6cN2Qo16fMQ22UBCI8Eh5SYXoOg/PRbvpZK6wrcRmhLG+dtbbKdDxpZ+qycMzWzQ3ClaHZ",
	"XVdM/LLRyMOlFeJHLKHCl9tRvcdtOXulbGHdH7YjRUjj84Zr517zTOusVRn2Bo50IV7UpRlpxhKSha3r",
	"VvtCvJBbZ62MlEFNhb1rhD9dv1Jc2xQl17WN6Slv0yOc/+yKYdIUlW47OXaFqM93yz5r1lN5+qgygE8X",
	"oLYaP8GKUknp+p9/d/nzRas/Dn1SZTnqL/auU5fFzmljsb109qgKervrmFBWX2DdEcXX8Hla5vhu8uqp",
	"zi8/tSf6dcXekdD//vXH17NWsYhjkq931N7x6jEWPHZfl+Tv3ad7gmMleSjq7iq/cTK18d9VDJ2wQaVQ",
	"lBXYpqzGZ0VB8vWJjoanm+HrKvJlyLnAWbmt3q6ejltnrQd2QiLB1qQ13TulkOYPJAk3NfCzpj5iVyyx",
	"u168WuMuITnb1ko3q2yl2k+TIuXsgqblCwk9rCnLSE5iVrKnNpN9tLKnihahqZx6tqg1nfrsnix4uRu8",
	"/t6qW3pa1y1xW7/DBLk2CRl5YEUlZpIoPEVau8mS2GosTeu6Vd+a/mygnpZ91oqX9TjHaBuL2GN5tVq9",
	"lJCxBoEj7KXu8fg+Tt1qB7sNbr99F8p1xdnbGH99oZ7v0K+T19T/jXWzjul30lorBTuQ6z1F3LUSF01h",
	"0VsiuXNWQuPKnoKB54a6dzm6Q3O5z6yn+i9vXbJT9WynHC8ryl3zBg2rqd6iZFQoc+KHycPF21g1t5QX",
	"51tA5yP6JoLHCH09e83N1c2lz1Zpy4NTNuaEH9u/qvsvdmX7S/3YerMD7ZB+Lqun3+Xxd3Zdh9y5aJqF",
	"dqP9ox77PQf16fo5VOasPNW2XX8vkERgq7AoK++wFYGnkOd9QtAA2hOCn4UUcNfYWL8pZft+iXoHwpIU",
	"QoMw/XvHFFvqvQwXDq3U4catXd79RMBCqOKClyyoO6EIPRMWGa0EoDIZzYphXT97Mj7Y2ZjjzP9k0l85",
	"vnSR/4S3z4lI6894o1MvHPkbM7VCd0/XPlzPP8v1PJN4cij5x1JZm7DDttFTl100faTComi6o3eB/dFb",
	"MmLW9Jq+ya+mo/KQZy/r1f/VPEPN7xT5K6yry5z/W8OGL290bB7bnv2k8WXL7KHB2Wsu/XPRxH7sTlmc",
	"Pinec1z+V7ccP78N6b1vwDr95quGSQfkrLJUErG9ptmL1s/T+neY2xPv4vo12zlg5al+3dOZ9P6DXxZl",
	"us3Cd88/N4q/E4vmh/8T2n2bp1RgyWOYp0llDlpnrUXOW9et7w0Lflx/+vS9EYAf19+zNC9/fM9ydh+u",
	"frTOWo8kD4nH9xtpG7Gq871KHrYZdM5oQMoLP61y91ffvdS8dqlyul9uR0JYCPkiSXa9NWleHsLudNon",
	"gVUz90BlC4+H/g5i3a2aPPfr3IerQ6h191Pz09unR+n0AvVjteYeLtA6kOtnmEFZZsULUPWPkqSx0U04",
	"4wdCumjCkxraCbtX80thJflg2j7TPFaSvznnrJI8sH8B14pqnQ+F+2exrc8eGU+z7TnqX8W8+o6joPm9",
	"+5/Erc9ifdfPvwu7/hS3vj75zhe/2kDUf84iq1Ca1u9VpMJzqvIUCT5/9ZL/u1i6EJJUoGHO/JKvhZzx",
	"ukFyGZbBM0TBW5RCnFLGt7FH0UzYYfy04M7R//j64/8FAAD//xDcn9jAdQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
