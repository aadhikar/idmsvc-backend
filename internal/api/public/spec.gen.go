// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"CTNAcZe5NWg3zCm3ulv9bwAAAP//hdQMjjtaAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
