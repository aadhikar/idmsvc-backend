// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
