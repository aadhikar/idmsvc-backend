// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
