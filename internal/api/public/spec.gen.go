// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
