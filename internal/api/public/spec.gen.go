// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x8+XPbtp74v4LhtzNNvk+UqcOOrJnOjmM7jdrEcW1n232x1wMRoIVnEmAA0I7q0f++",
	"g4MkeOiMX5t2tz90HBHHB5/7Ap68kCUpo5hK4Y2fPI5FyqjA+h/HHEOJT1gCCb2wH9TvIaMSU6n+hGka",
	"kxBKwujevwSj6jcRznAC1V/fcRx5Y+//7ZWb7JmvYs8s6y0Wi46HsAg5SdUq3tjLtwKPM0wBBEiPBDMo",
	"wBRjCkINFup6HW+GIcJcA/ubfzHzJyjxL2Y41n9csXtcA0jOU+yNPSE5oXdq70XHO+Wc8Wc/nl5VtB1P",
	"fwE5okHEOBAswYClmOudut6i471lQh4zGj07YPWFL82sVXRQIMoZBvlUAMMCzndESENK8eygtqy9HNqJ",
	"BBynHAtMpYa2gmEIYiIkYJHlJgE+Z5jP9REuMER/OJNfzYhYDbBIcUgiElqILah3REjM/zyZzHnBCiW3",
	"ANW492OK/lTNUYMy0+BUYFx07G5G08FjzOXrjKJYw1ld9ggYhaHYJ2Q0hBJTpYE64Pz0vY9pyBBG4Lfu",
	"fnAIQsylohqUWHgdTxKpVvSOwFQvrpY4PmqMqqiljvfF5zOfpNCfhaGjthCOhIb8uJyuUYkQUaDC+Jyr",
	"M0qi9HcEY4E7Xur89OQRITLM1V/4C0xSDduHH04+vD+anHVPfzt6f/7utAOOz35wtgBHmZwxTuTc63gR",
	"4wmU3thTR/DtcuU5J/oHQGGCwYuLN8dguN8bWvS9bJx00fEoCe/V6CpIVYDA8ZG7BZWYUxgDNdXsRCh4",
	"d3J03ro+k7cwkvUz94PhwA8Gfr93FeyPB6NxcPiPIBgHgXtExTS+JAl2dj9jEjzAmCCgVwXqs5AwScGL",
	"j1fHL5eBMMUR47gOQ/9rYTDLbgJEipPq7r767/Xpj5MzcHx6cTV5Mzk+ujrVv15f0/eTSbfbvb6m+ofT",
	"s5O2QQ12UJuUYJ6fvgdLhaMNRoE5gfEtzZJpnV49r+OlUCrKe2Pvvz/1/MObT4F/ePP/v3N2vNQLALMA",
	"eDGFAoNe0IoPkU3/hUP5bJKQr+cAY37ZWBYWHY/jzxnhGHnjT14hWoWEuMxc4SpD3Tr+yjPeFHuxHMi1",
	"GsZx/daqmLq2LGyDYBkPFXwFip88mEl2iylncZxgKm8xhdNYHVnyrLHW+zkwMIBTswI4cb6XuG6Ou9Jf",
	"ioNz5RQSlGhRqGjEpfDUrcCp/gAYB4gI/eeMCQkeEqCW8MslrPUhwiLCPb+nTlmCNWUsxpB6dUtW3/tt",
	"lkCFUIj0xs7H+mbdym7ayyACJHMAH7F2My1xnCW6bfJhht2a3zexx1dq5KIgSf0EyhrrT4VtxlTy+Vox",
	"WEaeKsKq8OZA3JQMcsGYBApEvX3NMamLx6Lj/Rmcb07QEIDVhLOzCFJKEsLePobYh6PR1O/1MPJhP5z6",
	"w1Ef4sHoYIAGQTnFWF0vmVvGySGt0b4UnY5HUu2chfBWedPe+NNNxwtjog7DNERKojQBYZzkG0zOj3J9",
	"anTUA+b5fPvPXrcFikv9qd/8dLP42wkxnLLMcVi7FQ9A/+RX2X2ZvBK0mbROkDMp97/WTztTI79GOxTM",
	"tBmUKdS2mtxRQu9u7/FcrJt4acb+rIYu10baOgDJLBGmeA3yZdWaLNFVLjqrONpVEzUNdSlUy6bmYaQG",
	"r6B2S1BjFQpBFd5+9aqPDw96Ix8F0cgfTqORP40w8lF/NOhFB4PwoHfoYijL9AIJ/PIO0zs588aDg46X",
	"EOr+Mz+8u+W2QU/JEttp5Q9GM2l0kzRPJ6mwq6pDQnirPDnRhirlSR4My3hdR5EqloNxrFknzy6EM3U+",
	"9YcT4XUAoWGcIRVCqsFG6YEQVo31p2sKwJP6HwDXhdt37Y3Btff+v2oh0eT8CBwfXXudfLzxF83oZV5r",
	"58MP9YWcFay7+FVLuB6oWajnfC59VvPNREA9f9C76g3G/cF4cPDP2nDt7q4anQ9OcWKGrQ1sTtdHNhaI",
	"xTW9UWZP4mSt4nFj8kXB3ZBzOFf/jpnJdbSw1zvLOzCO2SNGoBxa4Y6na8/yw7U3ZUIyDaW7lv70Wn8C",
	"CEoIQkw19hYbn+Kd3bvtCMaq5+Kz9Bh6GIBCsJBAiZFSs4rrFce2aFgl8XqKXwrmRqBWLVJC6MTM6i2D",
	"fBMzd6FG5msaOV1FsZrPYN0OK+CizTff4miTFBofqEmMmuEpVJfLZ3WCVdBQHm6pacotyySFH4rYdjPr",
	"dDHD8QQlJ7nntFSV2/Ntp9DNJGCQZZKl1EQTgNCc2QpFD9Tm3aonHsJbYXc2vnf0GVHDi+b3Nn90Foau",
	"i1ldQH00Wcbah5we3tjDmTqZsjv3hJL6CiKbFoe8TSCFd5gbtz4YHB7sw37oT1F/aNz6w4MRqrr1ixZz",
	"JgrsbuC6GhSs5ss3asxiKSo22qcFUxvNKxG5mQbLhbiG7I32WkqLNb6nM+29maX87KawWmAs0pfhsw1X",
	"9fMslV43gVMK2jb+ZX1KTXrPrDatu0o63aV0Yy5/L5SPpCwb90Mo8MuKVWtIWWkXEPVVbGbVleNf9vcH",
	"VQezxMGbLI7n4HMGYxIRjHIQ7Bq7eZxXNsipRRAK0UU5CbwIM84xlfEcMBrPQR7n6NPSLFGEL2KfGxcD",
	"Tnidn8Kmsq5sLmNLqHV9cUIjtmVpIGSo5ZyQAqdS4xdFKayrmHpOWzSKJSRxa9Chv2AE8Jc0hrRwpHVG",
	"SK3ZAbh71wWSwxBPYXhf9ZEvbGYFUKZC9IwiF29m1xZ4SEsABEFGyecMA4IwVa4b5qXBTiGXJMxiyAEL",
	"DW1DnMOZcjaNcVKFrP8q7B2+Gg79/mHU94d9GPijg4NDfxTBYD+IRlGEIgdWUwUut27NUUsosxb342qG",
	"wdurq3NgBmgqlGk1tXAVtGEwdCVrJmXq27WrgVtdrKoZ932Tcdf/c7PudVDajrIsDp9hMMsSSP0iLeKu",
	"JvEXuepgZ0yCNzUmqM9fn2hXswt0NDKHllDUoK+Sfdk4m26bAbZzc37EFHMYW0krisMcy4xTjMB0rtFC",
	"UCIeQnB0Pqn6ONju+empkEbvNURAHR0LOQYlKFYoxRgkjOOWD56RIO+7p9/8i7f+5Oxy8uPbq0v/4vSX",
	"j6eXV/7kZFHiUPFb4C1uGh4JLrDQ1hBhkCmUcD0QVIHCQb7OlMlcAoWuL2UqyMEIPM5IjEGKuRqtYm1I",
	"3ZLv8lCbIBM5rjieG+PqY5oZwyBwvmiWMR8Upi8Mpp0BBp1mxBboN0GuCkZ1zW2jEKK0AvXgSEnaBxrP",
	"c8dzZWRhabbUzag2z2wsGZUc1RvredZNhbL+3wtgbPovhU231vFMl9VqvkWVymqB7nN7GL+cnO1glPPW",
	"mS11wEWtQUQzFEjhPGYQFZpxT53CDxmN9saEPmAqGZ/fErQ3Vv4lwBSljFBZC4JszKPm9ppYWh6OhAMY",
	"DqeHPb//Kgz9Yb8f+rA/GiiTB1GEXw0CGDXDkb9EfnqxjM0L8m3sQJdtVppmbnrW/OByxXMmNSth7tR2",
	"tHgmgeltUZopGGRpiWbRqY1pqdW0mIESqjUJNbcnZ6Hc6FqA9LyJmWqmTZ3L6Ollx7/2Fh3QMrLfNnLj",
	"/JvDEctyPzumsxpRqKVCK2IrezxrhmiZYtw1GXS0ktKrCb0pnRulgm1yJbvlLWrU0hve7I7dWvvkdii+",
	"qvcmKptjWkCBZMoh5QQ/mBJaXk11XTbdxkskIAJMsfLLDLkw6gLdn2CXIgJIeI8piDhL3MVqdqtavt68",
	"eO2WHm3CdE0bVN4FtaJUQOsqtVoaaRa8yxTjX6iq/feqLbtWV2nXvE183RzTT75Fg0qBts6K0nCnkhda",
	"7X5sXydePrPigqth7UVi9cV/DQVGYJK7lmByYjJ82sGu8FAUDA9GQdDzXx0M+v4QDSIfRqjvv3oVhIeD",
	"UX8f6izIbtVjzdQ71Y5L8rU19+qiJfkdI/DTr5dA84OSpZ9+vVL6DWZyhqk0dVBzZtv2bCLL3C3vukkI",
	"NchsuD2wTtv7CZS7aGtd/FMaB6NaK7To7tKT9Ed0F22j/XZpvPFbG29sRs9mcXURqfsXbq9ZkmYzCIg4",
	"wRTF81of3pqzf10/3lrlt6ZTry4LLa16y2+J7BprQ5DCO6Jb/JXjk8Wy/Q5JzS/Rsvrpm5Kpm44XE3pv",
	"nFbClQvi7cGU7BGU7D309uxB/iMmCZE/9ILrLAj6ByyKBJY/qJ1juN2cnppE8ZftJ6UcPxCm84dbQLjo",
	"eAk2OlInAr1xr+lHIatFm4rS3kdx8/53eOMyfZ0529o+cuyvWufccBth9J0e7hxqs2nv1ehGN5qRFwOB",
	"XXETOWuVMSeI2Uak3p6+AxP0Po/GilioQaGq+m5eodhAha4MoOqBbD4YcBwyjnYIXCvbtXgV+Vnd8tKL",
	"MlUJTs4uQQynOK4WRGGczmDVIzqoJiN71boM9H+/Uf8L/MPra796H+JdGwyT8xK4Djg6AYJI/HIHP6XO",
	"tl+T2qTwgdwZWDXDltZJuTKFOq6nMP+mKq2WbTCnfGogMMKmLGl7XvQ4rcFyt8bxTEuPm7dWSA1W1u6h",
	"hu26hcHh2i3UsF23KDG+dpt86G5bLc0U14WiRZnW9PZ2YqOmaJnIBaTiqpi72/VuJ2sYlS1IiPor6HiG",
	"3bxx0MzPmuGNCxxMwtiqSwEI1ZuHLI5x2Kyv9Sp1Fip16tkiglCJ70xi08JT3+rM3N9iEdBmGKSYF4a5",
	"uUh+kvoqE0okKUAuavdL1qmnRzUScgiLTW7Wk13TtIXqZSq2xVj8jPkUcyZs86S5MpaJDMbxXPcYZ2ma",
	"Gw6np6VqOhqpp4ICetW1JS7Xqhz5/9QGpatsyj9cm9IC6g62w23T37r7r4zWfxbgkcgZ4PihMHWVSn2V",
	"tfMLBDX0U6D9NcUibi7g8sMZ+BVPgQISvPjp15/t3T3x0nUQGzpoTSfqA7vH6PaeoDWQ2JHgHs8d820B",
	"uSdoZyBqnK5x4vC1pQzQv2/vFrX3wLWw/AVG4C2U4DKbFtG4nVDkl7T/2Ewy4YP9ER7gqd8bjkJ/eAAP",
	"/OlwBP3g8DA63D8c9A57cOckk3sAYAufuySddP9wmHEi5zocNRxo5mhyynkTLa91ma64Uq5ZMB8NzGMX",
	"eYOEbgAZXIYwxl0wkTqU0Q8bKDDAi8u5kDjpgI8C85cdwPjdLUEdACkCmMgZ5iATmJtmPe7eVgDHZzoA",
	"0rVhvaOX+9/5GxsW+pKxUvIznpszE9t4psHR92sbt/Rfw/AeUwSOzifmDgzhONR5ReMJ5RX+S8wfSFi5",
	"Rm+aXfypWcHreA+YC7Nqrxt0tfPEUkxhSryxN+gG3b65ODzT2N9b2rw+kUBIfZVaeyAhFgLqfuJ650nZ",
	"VjyDEjySOAYxlpZR1GylZ+/a7NEba7Btp6AiCaTkd+uH69RCfpskf6NC7XFNIce2cGJ2QaZCEjIqWIy7",
	"iGkDlTe6KGnzquFcCjlMsMRFO5ALVlpYLmCNXCFqGk8nOIJZLEFpZh9gnGHjOZyrQ/c1FZVhFUpsewEo",
	"9JId2gsMa3hjTz+7UXJUsWXjjRbHMm/qH9Qg7+3XvzsQ7S86xdHsbxuAm7sDK6C96VQf0ekHwbLItRjX",
	"9tKJYuXhJnOrLTh61nDrWY620jxS01OfbtS5RJYkkM/zOnvOpdYXdPlZiSy8E7rr1XZsCk+3AqxiRdsr",
	"AYjJWiOiVO0003dIOAwJvVujmaggdzMpfLuQP0FttCp8+JuOl7K2sMc0T5eynnu7LZLbbche5ep8J+/3",
	"eM3Q/NleQKls0fIOilWgxmirgGeK3VeTSvMveYYXDYbtrWef1qehvmWOrZG0u5RDyykntcvci05hQPae",
	"lE+xMJwTY9ni1J/o3/XVlC9ESKW+LTcV9e3N+Mks5PBThVbDtlDXdojqwrt9Wch0TT9CAQzAqPtNk8ti",
	"bx2xaqFB3pxeIFAAZbibJNBtCxB1ipeBuEULINrXbDXguXrSXbeOY9D6XJOyTizja2hbPj3l7WI2Wl6u",
	"+paJqsDdQAK/KRvRaSsbKOE3DqCNzOa1++OuGwIBhxSxxMy6013d0rjv36ufvgchSxJIkeOBeNdeH49C",
	"vK9Cm8GrwN76GgyCSmno2vMKT0U5ueVZbchT1fRrbGFJqA9V+anzdosm3MsfAmvxe3VaslIxlywXvOrF",
	"UFesut7GnLADwTdHTIMBPlDzIBNIoRCPjKNGk0DlbTR7ZJ2msMFiTvB1cVbiXzhL+Hk/wVfArlkwzxxW",
	"L+S6LKu5x+HGYDQ4GIRo6E8xHBlenI4GUe0G4jNxYgPoHGvwThnLPOJbh7r/LMZtJQRp1qL5PwrDqYya",
	"t7ZU7Gz7RKqsTGzOsWYeriksboQ5KK/bAvdtv3+T57jcZ5zULRp1BVMw28FnDotKJ6ZCnU28y43sWusz",
	"h19h2wbfpkU07yS22kTTFVn3SXPMtChMIGecPbbRpEVdGzK2cHrJyzWG/Uvo5v/Tb7vpt7UaDGygwNxH",
	"P/9Xq6/W10//xsorL6XG8+I92OLu9XqVZpfZVqGVd56e3DtPi72n6DOii7YmaXMNShlv7X3nPdKaXap9",
	"0msV3EdzdZgviUb0Sz9/SDiyskM3b6IvYKiqLhdvK/XIus5o88pBW6QUZXHcfh9/A/js6wi7wWXuXyzP",
	"8R2tuMBQV37uzYbaFYaGFnSuim2nAV0DhXDCcuZyDNW/+9Je+Srypj307a8wG3pVZZnp2x3O3ZFnUraN",
	"Dvdt1diPWLZdW1mvuI4yyQwfFPPLq5YbQpFfZGsomHPOUBbaXHrGY6eHSDyEew89rylwr03rgR09xRKu",
	"nXKuVDd+LGel5of6xJsCGY1c+cXHkzLhBhgFCEeEmn4Um9UpJLr8qQlKrp8FoAwgXRPUBiXWBtuW+e10",
	"MM0kSBjCsWUm2weguMvchLcb5pRb3Cz+JwAA//8wuT7f62AAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
