// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
