// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ki5T328nLHZudbf63wAAAP//d0OAKlJRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
