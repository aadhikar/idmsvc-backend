// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xd+27qOrp/lShnpPmjUK7lJm0dhUspbbmWFlg7VWUSB9wmTpo4UKgqndc4r3ee5Mh2",
	"AkkILV2sPbNmhv3PXo1vn7+bf/78Yb+LimlYJoaYOGLlXbShY5nYgeyPmg0BgXXTAAgPvAL6XTExgZjQ",
	"fwLL0pECCDJx6tkxMf3mKHNoAPqvv9lQEyvif6W2g6R4qZOKdPvx8ZEQVegoNrJob2JF9MuE5RxiAQgq",
	"ayHMgSNMIcSCwshTz8WPhNiwbdP+5TSGer3jTWIIZdUEn3WCZtqCYxpQMC1os2EZiVemQ2om1n45ldGO",
	"9xM6CJJI5lDwmwpA2dB5ixzCheP8clJj+t5PbYsINrRs6EBMGLUhDgNBRw4RTM3TC0d4daG9YlMYQKD+",
	"09R2OEfO54Q7FlSQhhSP8nORduINwOxuDpUXKhr2V7j3OtQQhqxXhC2XCCogYCPPlEKbPs1Nh/gilbGM",
	"GUn8bwE5gg5crMyhKmi2afCuLCA40F5AWyCmwDph31lHZA4IbTaFCM9kDFxiJiG2TV2nxpcQ4RswLJ2x",
	"mE/oCQMDihXvr3O/POEXk5VFi5EFxISI8AJiYtqrJ6SKFTELQUGdFmFS0Yr5ZP6ikE6CbKmQzKtFpQyB",
	"ViiXNDEhOu50w5UnA2Awg7bXQS5bKOZKIAlUrZTMZKCaBFpRTeZLWQBzpUJOzaWpjlg2NU+CuKsLEf6+",
	"I1HoOx9agfojG1JGcS5sObUwQvwQ5QgLZFFMiN7sHWIjPKOUhLgSHbuFVaqoXOK0ylbjzwVJIS7Q9ZVg",
	"Yn3FhIgcwXEty7RJRDaiTPkdT0BYBHGzRyodNjBPAWFielrooNmc8IJNT9GxDxFrPHF7JR1HZ7Cy4FWm",
	"xDO72+rtZxI7RH/iKP1IiDZ8dZENVbHyZ5inYRknQtq2f4aPCZEgwsgamCYRhlT6dCYB/7Ahw5w+Q4VQ",
	"hgVX7V0uSb4m29AxXVuBYQOmTHriTDIgJk8Qg6lOZ0RsFyYi9m2sDrJw75vrMvvMAJC5gAAmQak09fib",
	"VaZh+0ywptRngyfq5sWKOAUOLOTFhKjoiFJmshlR42WcB7rhk9XqSeeNsdTu3TYod5lb83r50/szcx5D",
	"Oy/K7hY9fuz4i718ivK7wQoE0xZU5LB/+hYU0EfahefDkeMJKKSWlPtbWU9NU4cAB3xHvN+qb31WqLeY",
	"uX/PKQ09PxQg91youbYNMfnUG2HXYMZhAardW4q4ouw6JuvL9Tio7S0LiBFliHMSzId77ozV5Ssctzz2",
	"1V+XgyS2J/VuW2p1Aqr1uQfYpyJR8w+7Bs6JwBT2eoEIEvnCE7Q4K8Pc6HIbYt1ReXlIKjTvdxkLguwZ",
	"hyOLFeFP+kUQ3vn/aKH2qmJawtYYXnPHimQxsW1gzx3jCam8zUW+qMBiWkmW4fQimS+WcklQyJST6VIB",
	"gGxBK5XgRai1Ap74ILQ9c0zbsrmiBJm+t571gjCKlvPiD/q/xwSftwIUaJM988ZIeaFC4vOIaojQ6klC",
	"TQqRjhzH5ePJYq3zR416FI0v8JJL5qaNyCrR/SPaVagPx2USPrITaCOgP2HXmPr0ZEIVsEmeFkBH6tMU",
	"aqbtzTGbzuaS6UwylxlmcpVsrpIr7GkFNOJ3HNsoIApo8HpJ+l+10Wx1hFpjMGxdtmrSsMG+yjJut1oN",
	"tK7VpEV3Ji1bVWnWqkpDqVOdvbzOX1CzvExXpb5zKdWlbHvQXzZmk/pDv39Tl8j1feOyJcu4n267D42H",
	"4UO9AdvVZVPK3Dek5fKhn31YqU3dAKPOXG3ez/rjhzRolldgPLhoV/Pj+rC1btcba0rFsLFuP7fXHd0c",
	"14d99jnwbdl5bty3qy3WdW22vL17qFbvGp36rT64vM/032QZXz1LSnXWeahK7fblfUdX8MD6YejPk/FA",
	"bzUuM2pzvlAMPQ2HtZoEWst6f3J9Y/5ozRdKR+o3qrKMq32pPps1e1K9VpMmZm02a1alzmu/fKWVSb7X",
	"fW2kFvjWWbw27sFsLOW7xVf9OdfNvMw1PIDdM1nGY7dN7opSJ2/1Mxfzdge2lLPVIN+f1Jt43Z6q+YKl",
	"LHFWnSD1OZvLF6xWPnuRGxhXtQlej00gy7hebkzGDWgvH5r9gjIbKLdG9342nKQK+eyP68vOS+ailr64",
	"rfZfqtfzzO2l5CykfOq2WG6OakbaMWUZ66Q6mKRz87ZeqjbWo2lhUV9k9Vnq4Sw/7TX788ZskQet0mTY",
	"7heGzu1rfXhVTnWXEzxfK93auiTLWBtm181ye3A3Wt31b6V5LTcfP1TXqRJw3LupAsYprfUyyz6U7l/O",
	"srVXklrpq9xUU9v3E3j1DK5lGTsPCN3c5U27a951rxaTaXd9YbrFh57jXt/AXk7P9/NXhfXESRXgJRk9",
	"Nx5y0nXBJnBykapftqle9LOZVq+aqZW76QFW9YnTzhUuX7XS/VBL9dU36d7N3JQta7Qojrq1Tm1VXjxk",
	"ClgrFFGx2Dx7UalQBxnc+1EeST+0Qr1B7lHZkM46upFLn5nVXrkIi9damoDXVnVZGowKE/R6+Tovq4ZT",
	"0Me5H+RKlnEpPTdNZ6DOW22jVHpWzXK9fLFs1aW+VDXzzed2qzlrV0tUO9XWsj9pV4F0eV1q3eT1lp2/",
	"XlDtzHQm9aJ9M8Zuc5TLXLYlXr2xbFRTy/5lW2pXJa20rFPzGqR7Uv8qVZX6dWl21WxX001ZxrR6fdYf",
	"Vat3Wq3mXt/dnNWmb+XhSDorrPSL4lwn5cFQKldnM7s6a1xW+0pV6vff2rXS8rY/oZZ6s5xUq/37q7bU",
	"bLZG87R6JRVuV2VLaTbIJNtwwbg6B83O8y0e6Equv5hkG4tptrNW6twhyDIO+QSpW5MmDSmd0/ITknm1",
	"Ftc/fiwbz2tnmi+edWpvr0oGLrTrZlbvKst+agQyuixjt6Yts0Xy9lx6a49Wztl6aby+pdBCN9/swbxg",
	"FfVxZ/DQQ62Bu+iTy7OsNsm31du6i16XoNytUb0Yq5PxdHijzKp16bLxUlW6vdkUasVGJpc3UunlrJfO",
	"1aZn9ujqpqDcqtmrt9aqmYPXqfSdew3uZRn/aGUapQV5uL5215J0pvTmvdE0Vxv3xtr6pXx/dpvVLXx5",
	"37mpFXuXDSlf7aTvC21nXCfzJZplqESm68v+y/Jl8XzWen3Q4CI9/YGr9shcvOVfBh2rZjtGf6TB5jPq",
	"jaTru5FtXDRBLnezTNsFcLk2ZBmjUWHYXCzt6/xNdd68ebgBKeXy5jb/4qSRdWV3q+sf1vVofD9uEWd8",
	"21wqs3rdwDeD9kVPak+WQ1nG9nVhJJGaQtZVXR+5BXBVc1pKofbcy6108+x2mmllf5BBGukvaOWOJmf9",
	"B6O8Hq0ezlaguV6XZRnfvVm5Uqrdfa1fTV/br93m7fN89tDU2vg+pU9Sl+uRukLZzHhQdJTiYvVmuS+F",
	"tlNo5W8aIwWYjizj++d78HrXfNNShtacNuuN4fhZljFbZhqdetzSs1niODSQ8YcY3RAo4IkBhbgdF9+6",
	"bGNCLO5EESjwtqJ+JEuZU7xO/7Fd0p2EgLCiuyrCM1bZi9MoIIxPGTrxsMl3kcnxuOQXoJIvMMnPIJLv",
	"45ETGjmhkRMaOaGRExo5oZHfHI18yPhRTIiIQMP5ZpSMrs3ixyZiBGwbrFisnQd5djHMrQdQojFLL6bl",
	"YRInGsOMIpS90Vc6pb3xV1n82XnesR53ZxqJ1G2w295Ymx9la1mgy8NrX4fbGJN3ODnYHAyCIMoT6PQE",
	"hBnC82JOHBb6R3utTXyOHQNFDt44fhMr30FeYmIDE2Pimx5GpJXCGEqsxAGoUD2Oz/ZWtKAhVj7FV8fD",
	"q+PR1fHg6nhsdTy0Oh5ZHQ+sjsdVx8Oq41HV8aDqeEx1PKQ6HlEdD6iOx1PHw6nj0dTxYOp4LHU8lDoe",
	"SR0PpI7HUfEw6hMUhfl57zbcIFbEDD+LZ8v59xbSneNhfzl+3z3T3C65cYXRpfZd1EzbAJQgFRCYJMiI",
	"Pa7dXXsPbckW4xhSItx5j83M4Lx6jzkJ3ZO5EAORvkZSHozbwVL8u8DBH8/xwALExF5t01M+h02bk0Q/",
	"wUF7VTE/j95zjCkm4o8Y/Q5C54r+R++4U6yI6Vy5cAGySnKqZvM8+6FcKH2VnRQg8/2QrAA+i/dQXst+",
	"6B2nFXvmeNDoERYc1GbDoTDRh7DrgGScLf883uybYJT4LWGPB6r0nd9wR6l3ExJPmTkHZubcnTJzfrPM",
	"nJDm7OYsEmhjoPuZd/t4d6DC/UxaUNjYDkwM4slALD2IJwPtkM8Kz//S1J8gZ39VItAuN06pQKdUoFMq",
	"0Onw7XT4djp8Ox2+nQ7fTodvp1SgUyrQKRXohEZOaOSERk5o5IRG/l1TgXZiQf+2yUA7M/1uOtCWB8cl",
	"BsWz/JQadEoNOqUGnVKDTqlBp9SgU2rQKTXoPyY1KHRNCudGYO67M42ZAqctSsl23McjE5D2QcdTCtIp",
	"BelfOAWJXVS3q8RNiKENdAGye+y8e9DC93pBApAuVsQqUAU6LeiQigBUFdEugC7wCk5FMEwbxhTQPRtV",
	"vr+9j5ODq2Src9dqXg3vkoNG/75xN0y26h/UfAkgriNWxHw67o4uj4jdqPrcNQBO2hCoLI8Hvlk6wDy0",
	"vrlrjRkjcgRTUVg6jLK5A8ayzakOjXOBXZOmIair//c//+sIC6C7dMeFhSkUdFMBOlpHb9UK8CM2U0WN",
	"I9fF6NWFAlIhposItLdbZQvYBCmuDuxPCA1R8PLsAtXRXODMl7BULi3Lz1rsPVoeb+MSX66Gw57AKwiK",
	"qULBux+PMtPnmzd4gnLXho4DVQE4AhD4CJxZHgvvrrr3t3XKNcs2F0iNMo1KNyEa4O0W4hmZi5VcQjQQ",
	"DvxFRdnF+sr3Xp/blqcYjN2bie61Fm4E+6wjci3hF7ayudjPhsS1MVSF6YpfLmY4SDUEqdcKGxJr5oiV",
	"P/9JNvW4Y1U+Re+xl1py7ji+IINUIMxRBLUyMDVd4quII0CsmC4m0IaqsJwjHQoWtGltqikABy/G3H9u",
	"5ecEfTK94IERmyZvkU+nAyWcW7zkZ1nNz4Q+ZPzI4OFB4SeuZx9MtVu8QWavZm8jUZ8o7WcpXv5Nnp+F",
	"lfiFV2z2ggVWugnU7c2Rc9Mhiom1VIUuTwLEqmUiTCJoxQMntHLmfPcGtb23Mio5oOSn5UwyW1SUZD6b",
	"VZIgW8ol81kAVA0Wc2mg7Xp8H0TseizN1XXh1QU69Z9q6HbGyEWFodsrhdh7K0VZNFa0/vkhuORbFxKi",
	"LYfj7iaMknEIm/aAjXi92ajFJyrzlcsbRm8wpbPxbhMlJnV9NoILGLkecusclnOIZYzipCBEbiYl4AXi",
	"7bWkcVc0/twlo5ucZYWFXr+MMJ6fn3+1RwxlNu+ETyPJzVs0/3UGcyRz+KsE4H3psbFJCbENwnmxcdu9",
	"7VTet85vp+KuLwur3Jda+pmDC1wdXAdkj5qyy3ApoXBrd14m6/lvmU7/nfT1L3PMv60pkSzuQ51KVBSf",
	"S+sr9xI89rDADGFApWdDx9VJ/E3PEXfAtOHP30ekjwlRR/iFr2DIZr+RSAELpZBqpBaZlDeL/9aRgcgf",
	"mbTsptPZgqlpDiR/UGSsg++1ydBGGL59v5FlwwUyGTz8BoUU00BuggzniZVMjBfba6TePdzBTc+MRUUO",
	"glVR5Ys5udxw/7N+elzVkIlvWfXApA5r1qa1o1sR1kWCT94n5PEAO4qzoSiFXyA7DBZoxldcNu7WAVKn",
	"uLGsKKD7N1XQCJDks9xloAb5DtsL1bF6TB+3F8QyvHwehwQ5G77slFY7uE/OpS/7pNUO7nPLxC/79ase",
	"2PfeJSKqu5+qdxvGuQr6NXS5fWhx4K9URGOpvjfaiV7ygkDgG2GSy27JQpjAGbQPmlEbxq15DCgpro3I",
	"iq10fOC3pD1P8kAPWcXxn7kOAQgsvC2Mk4N5suVXT4iIbbYgUHkYnC9d0Uq++7PQDVzxFwko/PafPAAs",
	"Dr/zTEEVKC8Qq4LUa7H5eRELCvYQ++2hzwZekJzy+mJCXEDb4X1kztPnzNpMC2JgIbEi5s7T55SvFiBz",
	"xoHAkwSp9z17p4/UO93qfTDYCmxgQAI3UZID73gPqAIbVxJsgFXTEOjaLcxY2IYE3zwg0DYQ3eNPV8Lf",
	"aaW/02YsjuVdWV9S4AUoJKe5YtoL/OZy6Wjgl7NbrLAZb4W0b5cYXC44Ltm+O7FjXN/c+fqGwrayUXZg",
	"wftTYPt7Dqx4zdC047b2+6fphbKPmJOvyAJX8/NDtf6IIQdeDMTbnKuIVp26VDuIDRSEZ19QwZ88cJJe",
	"R8kWizvuJeAxIVpm3FJRA3QX/PkzHFxIfhja3zlvT5e2yVWbqFqLYtXNIwEer6BDqqa6+uQhlAVWz4GF",
	"zr73IErgMYKPMBqicmEfAk8KZdP5eFDoPcwQCd54szaACtnDLvl0eh89m2HCr/bwVvlvtwq4c+aHIo78",
	"z0cqVcc1DGCvfG77sloYAj+nDL05ESMxAmYO+72own8xzYIBPriJ+V0tERxCu+UIQIGOA9hBYzQQuz1v",
	"nAMiLJGuCzoM3nBviAlxBmM08tJzIfzogQimPQMYrVnnCb4P83+p4D+7Q8eQMbChF9zZ/HSWarViYsfU",
	"4blqkh0NDcPfT/2+tVl8BQ7yIt6tDjVAt4teYcChpT2oAYUsM3aKaxyqZpm0sNlv+JUz6a2fY68JbQ1/",
	"M+yOmQegQ5TsDjuXpqOxoQQLcgIi1GcuouVBmi7YgbQ3Qe/rQSQzcPw5xY875nmAfcU9EPU72ybLV/W1",
	"1cujDOp1wBD9qxeoKX6hkpF1a7P4bk8D/3OWMXb+vPU6fq5qjA+JWaeCz9X8xUtVcKgPb7UKaX/ma12M",
	"fRTvt16awtI552cYfmk9cudIYAFKvVNU/MHlrUMSd48F+85yXt6QQ6j793Rgg2kO0wLeUUALvsIMA//A",
	"lT0O6D2yxqYgLIEjcILV3xs0eNzbxQNhNxTJOPITGjYMdAS68O+KgJ3NADUhuJZKNYD6CD4iYtuDWADg",
	"OxX+tNcWWMS+XEdXNtO1v5Dt9jU+8WeWm5jH/H5noVJyA8Z2WlsOWltit7ps587Pb3mqzCr+dSZ+cLJn",
	"v7/Z3QuKaRgAq79yl7+5peVQRodUpRu24Kh1MV+8OZbfRkii1xjxg3rBdfhs/S1I5M07A/LD/C/jKyii",
	"fLtBwL9a+e55fpS9RwfZr5//YUp4WKbBhpAjwyN7MZb0yXl71E8Hd9C7aQ9h5xxIEPg56BW0QRUa5sZJ",
	"bc3sr04b2T6feuhTufGP43IhhdhJt+zgBQZSHs7Fr2McByxNO0fe311nmpDEZVvEhxWCDSWXmF5Iwm+/",
	"TfY5kAr/p4E7DqRnm6oA8QLZJqYeR0yIrq2LFfGdi+Cjkkq9cwX4qLxbpk0+3i0baujtQ0yIC2AjMNWD",
	"aRBcrdjml+qDF06woToH5FwxDTGx/7FW/k4rBShSryUgR7BdjP0zEdP/CZ7fdz6fi+2M1gx0ZblTHSl+",
	"jyzXAG/PWTT0Fu6VnVrxEHpqkYkfgDVjlhseQAzp9bbPOSGWs9MVP1/nywCHfspcMF0O5VhvMR6OyasK",
	"CTgJLSi0KSTgN5fcHQEz+A+QmkPHORncrxJbHS6gblreD6b/KuGxbPU5D/7/ImmV0ixr+19FXD8lrcfN",
	"2rkT4hrc17c7bgrXVfYQuypst3Ub1Lf9tCt/H647AjYFFdlQIfpKsKHONitLRObbHoWpSwTDVKHuYQ+H",
	"V/Ap3gzoL/Qfjx//HwAA//8ghfZl0YEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
