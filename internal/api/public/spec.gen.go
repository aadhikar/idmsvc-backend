// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
