// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
