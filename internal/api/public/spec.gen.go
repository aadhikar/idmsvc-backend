// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
