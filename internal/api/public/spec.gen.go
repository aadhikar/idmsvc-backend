// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
