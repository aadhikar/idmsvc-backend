// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
