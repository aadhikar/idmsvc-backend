// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"s/m/AAAA//9Cl+EbWHsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
