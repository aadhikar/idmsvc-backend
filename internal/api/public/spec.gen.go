// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAAA//8ItZvCSXMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
