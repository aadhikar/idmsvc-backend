// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
