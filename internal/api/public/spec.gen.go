// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
