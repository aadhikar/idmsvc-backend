// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w96VLqSrev0pX7VX0/BBllsOrUrTCIqCggCuyNtatJOtCadGLSAcGy6r7Gfb37JLe6",
	"OyEDQXAP39nnHPefrelp9Zp7rV7tq6SYhmUSRKgjnb5KNnIskziI/1K3EaSoYRoQk7YF+14ba1JMQhGh",
	"7EdoWTpWIMUmyTw6JmHfHGWODMh++peNNOlU+q9MsE5GtDoZMfNm2re3t5SkIkexscVmk04lvw0s54gA",
	"CFQ+AsyhA6YIEaBwCNVj6S0VgfY3B7Vp26b902GMzHorhiQAyrsBn9BAM23gmAYCpoVsviwH8dx0aN0k",
	"2k+HMj7xbkD7YRDpHAF/KIDKBs4r7FBBHOeng5ow925o2xTYyLKRgwjl0EYwDIGOHQpMzeMLBzy7yF7x",
	"LfQRVP80th3MsfM+4I6FFKxhxYP8WGKTeAtwLTFHyhMjDf8tOnsDaZggPismlkuBCinc0DOjsKHf5qZD",
	"fZJOyIRwkMTvADtAhy5R5kgFmm0aYioLAgfZC2QDagI+Cf/OJ6JzSNmwKcJkNiHQpWYaEdvUdSZ8KQm9",
	"QMPSOYrFhr4RaCDp1Pvt2G9P+c10ZbFmbEEpJWGyQISa9uobVqVTKY9gSZ2WUVrRysV08aSUTcN8pZQu",
	"qmWliqBWqlY0KSU57nSDlW8GJHCGbG+CQr5ULlRgGqpaJZ3LITUNtbKaLlbyEBUqpYJayDIesWwmnhQL",
	"xRwB/HWLoshXPqwD00c2YogSWAgwtTAi+JAmMRRMJCklebt3qI3JjEESwUp87TZRGaMKirMuAccfA1mh",
	"LtT1FTCJvuJExA5wXMsybRqjjTRh+E4GIEqCpN1jlS0b2ifAhJoeFzp4NqeiYTNTfO1DyJoM3E5KJ8EZ",
	"7gy8zgx4LncB375HsUP4JwnSt5Rko2cX20iVTr9GcRqlcSrCbbt3+JCSKKYcrL5pUjBg1Gc7CemHDRjm",
	"9BEpNG61t7Ek+5xsI8d0bQVFBZgh6ZtAkoEI/YYInOpsR9R2USom38bqIAn3vrkul88chLkTBFEaVipT",
	"D795ZRqVzxQfynQ2/KYgmynCrw8MwVA3/NU748ZNR25fHzdHcqd71WSY5CqMd37bEvGdW4ujqMkbgGkD",
	"FTv8R5/pQyzEpvDULnY8nEY4iSEsIM/UNHUESUjcI2vGQTh3DUhUYCOocgBCrfFFo/zLNT12gLECcIm4",
	"F+LROzTF8TtaKFkDNgLtF1kugQM+pt4GnkYLbwjUXdtGhL6r14hrcDGzIJOTACLBctsqztpr2WO++ZZE",
	"7+KfuDhHRT0iAuG975TumIexR8LbYmNRrN7wHxw+HcOe5yFFSPc6IQBMfJGZSKfgK/sCwKv4jzVqzyph",
	"Ldx2iJ7HcZJPpFQwwJ47xjesijEnxbKCylklXUXTk3SxXCmkYSlXTWcrJQjzJa1SQSeR0Qr8JhZh47nC",
	"CdrmihJG/s5+1hMmON4umt/Yfw8psW8Fcr2SvG+ClSdGTbGPuKIB7a4M6nIEdOw4rlhvItWv/6gztaMJ",
	"wy27dG7amK5SN3/Ep4rM4bicwj84CbIx1L8R15j68OQiHYhJvy2gjtVvU6SZtrfHfDZfSGdz6UJukCuc",
	"5gunhdKOUVCj/sSJg0KkQIbol2b/as1W+xrUm/1B+6xdlwdN/nUyIZ12+/j4eDIh/EPzupHUaQOMIOKE",
	"vElx/R6Yim2bN4UOKhUDr5x7/kzvQM8Z8M8SypzpOfZDgHwnBTBRdFfFZMY7e56yAqO6l/ORx0Uf5aEf",
	"56CfwD97uOd7eOfjnPNL+OZtQh6YMqbIcD5oBxgWmdL1tDC0bbjifqnva8S57cpjpbiz4NkLj3uc9+34",
	"V18z5xIVrteYT2j83n3e8hm3dxqzghsp22m/fMvVtuCNMFn7TRhH8hYm+5tDNAzLI2DbA5hwWfT0uBBg",
	"/xjc3tg8fmSKHVKFpEmnH5ERKbUR6ATX05Nm1inK7ew8us3qkX5CknZ2tJAhnb4rCUwQmnhdr8uLm5m8",
	"bNfkWbsmD+Tr2uzpef6EW9Vltib3nDO5Iec7/d6yORs37nu9y4ZML+6aZ+0J6WU77n3zfnDfaKJObdmS",
	"c3dNebm87+XvV2pLN+Dweq627ma90X0WtqorOOqfdGrFUWPQXncazfWEdAbNdeexs77WzVFj0ONfQ9+W",
	"14/Nu06tzWeuz5ZXt/e12m3zunGl98/ucr2XCTl/lJXa7Pq+Jnc6Z3fXukL61hdDfxyP+nq7eZZTW/OF",
	"YuhZNKjXZdheNnrji0vzS3u+UK7lXrM2IbWe3JjNWl25Ua/LY7M+m7Vq8vVzr3quVWmxe/PczCzIlbN4",
	"bt7B2Ugu3pSf9cfCTe5prpE+ujmakJHbobdl+bpo9XIn8841aitHq36xN260yLozVYslS1mSvDrG6mO+",
	"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",
	"ZkBnZXIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
