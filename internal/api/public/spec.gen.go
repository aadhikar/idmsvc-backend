// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
