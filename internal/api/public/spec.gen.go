// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
