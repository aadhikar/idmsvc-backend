// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
