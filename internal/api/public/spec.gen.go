// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xce28ct3b/KsT0ArcFdlb7kBV5gaBQLN14UT9UWS7SegWDO3N2l9EMOSY5kvcaC/Rr",
	"9Ov1kxR8zYPDfSlO4uYmfwTy8HV4Hj8ennO4X6KE5QWjQKWIJl8iDqJgVID+xwsOWMIlyzGhN7ZBfU8Y",
	"lUCl+hMXRUYSLAmjJz8LRtU3kawgx+qvv3BYRJPon07qRU5Mqzgx00abzaYXpSASTgo1SzSJ3FLocQUU",
	"YZTqnmiFBZoDUJRostJ+1ItWgFPgmtif4ptVPE3z+GYFmf7jlt2DR5BcFxBNIiE5oUu19qYXXXHO+Fff",
	"np5VhLanW5BjNFowjgTLAbECuF6pH2160Usm5AtGF1+dMH/id2bULjkoEuUKkBuKcFLR+YoIaUQpvjqp",
	"gbm3UzuViEPBQQCVmtoWhzHKiJCILaw2CfSpBL7WW7gBnP7mSn67ImI3waKAhCxIYim2pC6JkMB/P5t0",
	"umCNkluCPO19X6S/K3J4VJaanBaNm55drYN0mrg0Jaojzq65GiWJQsQFzgT4a17UrBCs5AlEvQg+47zI",
	"9I5xKdlHoJxlWQ5UfgSK5xmk0UTysjPX6zUyNKArMwO6bLT3IkmkmjXQ71a39BzAcYWBJM2VLIrGDnbQ",
	"88WHKd2AGEcpEfrPFRMSPeRITRHXU1hmE2EZ0dx/pHZZkzVnLANMI19w/tovyxwrhuJUL9xo9Bfrt1bT",
	"RkUEytcIP4JGVSucxhRqyILxHMv6JOj5J0MvMgM/mu8+gbfrAhSYNClBL0rOgcpsjRjN1sjJQBEkyqJg",
	"3B5aQMs8mnyohXTX3EP1NUCTlb9PjdJ03VTpPVDJ14fsc9OLOHwqCVcq8GGrdrTZ0ZaeI+uu1s8bxiTS",
	"PFIEeTBQ0cDmP0Mi1b5+D8Mz++nY3269saNIGk2iIcbDZ4Ahxufn83g4hDTGo2Qen56PMIzPz8bpeFAP",
	"oThXe87XVlscpZ6iNcVPCg2FCf6ozq5o8uGuFyUZUZthmiJl0FqAOMvdAtPri/7VTxevr19dRb1IAH8A",
	"7sbbfw77ASre6aZRt+lu84fDEDxnZeN4aAGC+RR7Cr4FHEhgz1MqgVOcIZLu3NWB6rNtaSNuf3F7KujG",
	"5mIBgf+/ADxLU1kaTldS0h+U6ruxB7kM0wLvQFF9hCLJrKrMYY+KyPaR+1REtbLy8LXSr18Ja6cGW46A",
	"27cGcvQqpHC3MhH54JDgjwlwc5v0AXuOBZyd1m6vdsaUWuEs09x2TnqyUmqs/lATL5SfCKKHCE2yMiV0",
	"qTsbNEMJbjsBH2Z0RhH6ov6H0CyiJLlXTJ5FEzSLXv/n5dvXF9M3DiTR9PoCvbiYRT3XnwhRAje9X7z5",
	"/kVNAboo5YpxIte9t9/7EzVmEKXm9i+aAjjB2Uda5nNHy7DRTJn8OIcF43ZXo8FoHA+G8Xh4OxxPRuPJ",
	"+Oy/vO54Id1M4d6ucwG56Rar/364+nH6Br24urmd/m364uL2Sn+dzejr6fSq3+/PZlR/uXpzGeplidjM",
	"6J060STk4mBbVWzT9mpUGHOO11F13jn966jZK6tDuhvCQrCEYAmpMm2lNkrgAasmBY71kLjW7IrericW",
	"pCkMyrcrQPfA58CZsFSpjh3SiPBoq3Xa15Qm4XrGEHga+9jBIf8QtthkDUuEfO3jJGicii6/PIysIKOm",
	"ucVRX+Rb0c/h3rTAbw3g7QJArV/HgeBNdWHHTWhCii2IUK1fCdabMVjmHPJphZhIEdTvwKZBHfVXLfUj",
	"oKOpEGr52M4XUAuHh+21tuBicAKHJu0ZWkcklhBLksO28Qa8njhBAXl75F6k2g9UHQaqRcJGVQNzm4ph",
	"sL85C76eYN2E+xyPSgEqeTcl15KC4ai/t5r2rfbWDJs4g9plcRYPjrM5MwgZcDGxMWouuIhQh+ld82pc",
	"BRP8UdiVzeVv8SmlBvLN99CFaJUkTb+tPYFqNEElryFjJqQVTSIo1c4Uc+8JJf4MopxXm/yYY4qXwM29",
	"cjB+fvYMj5J4no5OzcXg+dl52r4YbAJul6i4e8DdybCg2XXH5bDSQD0qoOVbmHUQJQFeHjSuZnXX0XRt",
	"iKRAlZ0BR/+csUfgcYIFoMs371CG55D9S8cHMDTE1ey9KMefXwFdylU0ORuH4Kgt34OI3yr+5uiDNKHn",
	"3Ypa9I7PelFOaPOfu1GjVqOeE3ZYtiG5+aw4FDfeueEd5NC5kq6AfwQKHGcIdCrFRo1bJp+CxCSLJtEP",
	"OEVqgyDkBNWog0wHMUE54xBoUL6Ossa/fPkpvnkZT9+8m/748vZdfHP17++v3t3G08uNQkiJZSmiSXQ6",
	"CNikI+JLJw6ngxdmnYD2miZIEXwuMkyNJlfpAOcrsiTR9+/EXswBFZzNM8h7CPrLPsJIcpzAHCf3bWfy",
	"glrG6RkgRViihKXQX7LJcDTuhww8FOm4QCUln0poGlnlMhaYS5KUGebbCW2Tdf9ziVOxKLFYPcL58/PH",
	"5z8vDgvVOimEHO+Xt7fXyHTQm0Q27zA3d31Da8W3z8q9E4olAmFkVkAPOCuhj3Rw+d3Lt+9fXaK53sMD",
	"SW2Ao9qE0oMGzSspi9iS1zZM/S+Sl3k0efb8edtK9b9M23Aw0N5v+pZma3d2WAYQKmFp3etwSOMCrcoc",
	"07iKgokV4/KJamU5sCCQpf/73/8jDF9Qgqlih8LLjPzd50fD/PZ7LGltUW5LtZ1sBRODEdvAQ+xDjyrr",
	"xkGWnEKK5mu97VUuSJqji+tpG1rATvvhd0KZuw7OwJaNmkyzYYhwCtukglCjqS4oKp2sBQKasJJKUPjw",
	"uCIZoAK46q0sAtNmLm1X8IWkJpawY4PNqIfeqBlxOhg0Wgy/TMtTmW1CHJsZvdPu/kFXWaNcG22RUzNg",
	"uNUg69vtDk3dFZtzCfauKG+8TLHePSrwOmM4rW6ZJysmZMLo4mSiDm8ENC0YodLzh637qzoP+x1nb7tn",
	"moxxcjp/PoxH3yVJfDoaJTEenY/j0xHG6QK+Gw/wonsKOk+zi82LMsvQpxJn6uxInQOvYyMWely6QK6w",
	"RESgOSj1M96IDzWzKF+r/t6OZtGWa9k2/6tLJ6k53ByH7DifjEPYFKJqq95UarFDZbwCieA+uJ8eN3Uc",
	"Cvo5SE7gAVpcb8LD4wrojJKQFMy5YOciAkl8DxQtOMubs3k62E6LHZ4Ua0b8bdxoTwDA3f93XP9p5GXR",
	"OndwL5FW3xz3Z8u8hM2+vEvX9TKh+mCUPTigHYvcEha0W/lycIxz01G+vfq6C+oatT2XWB6bjFDanGJp",
	"qnog9eo9RP8pqeDfIql7TCr1KfnOOJjvtGBq8VWHTo4rgiDpLs11muYlyA7IMYYSg0fnALf4voYfC06A",
	"ptnaq484mhVfPatXu7c10VtdXN9YdttT9yh4YoS7wEtCdX6CgygzGa6k83BdG/OHb8ro7npRRui98UYI",
	"V7gXneCCnJA0P3kYntiN/GtGciK/Hw5m5WAwOmOLhQD5vVo5w8eNGapBFD4fP6jg8ECYdvaPoFD5p2BA",
	"VHvt0WQYOIcszHaR1FblNS/vSzg42+MrZyA7VnF/1zzXRtsIo69098amDhv2WvX2LVVP0TObd4QcYmch",
	"G/MpfKplKQSi+IEsjWuliaqhSR1rleX5nvsfVHu9G4PZZfcOtAATmLBRf91PK6s74uzFqAXpJc9CR5Hh",
	"yt41VLenLmF4uHcJ1e2pS9Qc37uM6/q0pbY6e75R7LSb13C0q6eGaJtwBtI6lcxjBT/fYzFQ2XtO1F+D",
	"XmTULZoMuqkT071TVckkzhCHhPFUVMlddeVJunGPYSuNQOXZaRSK01l6/KXe6IybkolGXFQArzC4O4nb",
	"SbfyjEhSkVxF77bM4wf+NRMchdUid/vF/hpCHom+aCQlJ3Kt/RDD6s8xX8UmXCzXIZ3VBCGMHnBGUmTf",
	"dNjuvYjosIV+86EgyjgCfid3+BTk32BtqsTVRdaVn2OdjO2Ujv+Ak3ugKbq4nur92eifuiwRXVrq2GAa",
	"4rnpH/WiB+DCzDHsD/oazlgBFBckmkTj/qA/UsiI5Upz4GRr3cpUIiEZB4sJCQiBdY7Tj9HVqc4VluiR",
	"ZBnKQNpohBqt7snLkIb8zZqQifBKxPgSU/J3PXnP+HWuEss9k1BrzCjmYG/9ZpXUXO8TRgXLoJ8yrTIu",
	"JDhNbZFJfZYWmOMcJFSB0yZZRaVLyKpdZVqaT5ewwMr9rBVfh56NLV+rTY+0zJSqC6X3wwGqXBfbdTgw",
	"ihBNIv3yo9afasnOM6GGrRxqsR7lw2d+e4OiZ5tetTX77QBynYHuoPau137HNRoMtnlRVb/QYxulyqeH",
	"jG0HNvWo06NHNRBD64iHFR/u1L5EmeeYr10Rk9NSi85NfVYmi5dCXy9tgbiIdOx8lyo6HEEGZapDp85h",
	"HIRBNbLabP/WF2i9EAaCkC7omBLVdV7qKjGOE0KX/d1UUEGWKyliO1E8TaNdBNz1ooKFXCGTpK3Rxp2A",
	"Aezod6y/9aDG8AOE/IGl66/2DKi1ROAxkK2FNgeScoLm0Hw62BbRpmMyw/0KHHwf+S3bjCfS/lYbqYdc",
	"em8sNr3qCDv5UpYk3RjNyUCG6tH1d12w85kIqQ4Qq01VePgwfTITNfSpJavTkCths3n6Eal9Xqe3gB6x",
	"QIbgtP9Ni8tyb5+wvHIpl9CtGCiQch26ItBhf5z2qudx3LIFEX0hCLoQDp4UR5uuSfDNojofWcn3yLZ+",
	"fxk95eAKPN/8loWqyD3AAv88pXYTcLsCpODHpgZNBcrae7LRdMUw4pimLDejlroGQJps/1/Vp7+ihOU5",
	"pmnDC4tm0QjOE3iGz+L5+LuBrcEajwet2OQsiipvTTn69V5tRdbhjG6pytu2BfvWFcDiE/ceN+D762CJ",
	"aTezKgCwpt+ui28adj86Thd/U917gor9gnXfUkCS5IBKAUiye7AQal9AkwL7jNvFiTy+acjC/ljBL6JP",
	"K3ZVcB56SaANwSVSnI4Pzsdn4yQ9jeeAz42Gz8/HC6/e9Cvpd4doUuB4lSQIL5UT4O7S+1j3H1W/o0yr",
	"KAMn2nth9J8FxdswEGLjK96xN6O4fvpWs9w/45oP938lj3i7Lzz1T2raNHfBkEnsm82mtXPWks4hXvNB",
	"53XwNwx+wZk9/jZPevMjCMGz3hRL+L6240wAhpFccfYYkkngEDBiDGh6rcuewv6J+H8i6ldE1L2YiQ6A",
	"zOZviPxDA2bwx1T+wHDpElXZunKuqurA/SBqpzkWQldMyFiXTn5ZfErpJvRjBqaYUvkH+trgyuS0frSf",
	"Uu7FUFNW2L7FdVNyvzauvjf1+3zLZU4/tP7NbnOHVYNWhLRh075VOQ67gmHPix01kT6KNYslu6WpbThr",
	"FHEeB2XNkyaFnFW3/PrE+bVLeutfSzr018XCv85khNM2SqbrRRvlqF8JNTtFiMfi0Y8gQ5Ww+xHoopTM",
	"6EE1vi7EPpAK93S7AxzXnKVlYhMcJc9cqYVJS548DKOudf1gMrS29xwk3jvkWmEwPNajCvPBH3hXMaOT",
	"Prh5f1nHIBGjKIUFoSZtbwNdlfnWn7qkONwViDKUEg6J1CdDpk/eRyJX9YxoXkqUsxQyq0zCdFDaZR5y",
	"2AWd5DZ3m/8LAAD//8ipaRMDUQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
