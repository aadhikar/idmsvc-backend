// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
