// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"lVkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
