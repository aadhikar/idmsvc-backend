// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"FywO+u3l9v8CAAD//1VqcCpiXwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
