// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"nuYa6aObowkZuR16W5avi1YvdzLvXKO2crTqF3vjRousO1O1WLKUJcmrY6w+5gvFktUu5k8KfeO8Pibr",
	"kQknpFFtjkdNZC/vW72SMusrV8bN3WwwzpSK+S8XZ9dPuZN69uSq1nuqXcxzV2eys5CLmatytTWsG1nH",
	"nBCd1vrjbGHe0Su15no4LS0ai7w+y9wfFafdVm/enC2KsF0ZDzq90sC5em4MzquZm+WYzNfKTX1dmRBt",
	"kF+3qp3+7XB127uS5/XCfHRfW2cq0HFvpwocZbT20yx/X7l7OsrXn2lmpa8KU03t3I3R+SO8mBDnHuPL",
	"26Jp35i3N+eL8fRmfWK65fuu415com5BL/aK56X12MmU0BkdPjbvC/JFyaZofJJpnHXWE9LL59rdWq5e",
	"vcn2iaqPnU6hdPasVe4GWqanvsh3bu6yalnDRXl4U7+ur6qL+1yJaKUyLpdbR0/qhNT6OdL9Uh3KX7RS",
	"o0nvcNWQj651o5A9MmvdahmVL7Qshc/t2rLSH5bG+PnseV5VDaekjwpf6PmEVLJz03T66rzdMSqVR9Ws",
	"Nqony3ZD7sk1s9h67LRbs06twnhSbS97404NymcXlfZlUW/bxYvFhJznrseNsn05Im5rWMiddWTRu7ls",
	"1jLL3llH7tRkrbJsMInqZ7ty7zxTk3sNeXbe6tSyrQlhvRuz3rBWu9Xqdffi9vKoPn2pDobyUWmln5Tn",
	"Oq32B3K1NpvZtVnzrNZTanKv99KpV5ZXvXF7Qi6X41qtd3fekVut9nCeVc/l0tWqaimtJh3nmy4c1eaw",
	"df14Rfq6UugtxvnmYpq/XisNoQEmJKID5Ju6PG7K2YJWHNPcs7W4+PJl2XxcO9Ni+ei6/vKs5NBCu2jl",
	"9Rtl2csMYU6fELeuLfNl+vJYeekMV87Remk8v2TwQjdf7P68ZJX10XX/vovbfXfRo2dHeW1c7KhXDRc/",
	"L2H1pj4hvZE6Hk0Hl8qs1pDPmk815aY7myKt3MwVikYmu5x1s4X69Mgenl+WlCs1f/7SXrUK6CKTvXUv",
	"4N2EfGnnmpUFvb+4cNeyfKR0593htFAfdUfa+ql6d3SV1y1ydnd9WS93z5pysXadvSt1nFGDzpd4lmtN",
	"yHR91ntaPi0ej9rP9xpaZKdfSM0emouX4lP/2qrbjtEbaqj1iLtD+eJ2aBsnLVgoXC6zdgmerY0JwcPS",
	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
