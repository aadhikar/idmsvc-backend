// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
