// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"yWoX82eFgXFZn5DN2IRT0qg2J+MmslcPrX5JmQ+UG6N7Px9OMqVi/tvVxe1z7qyePbup9Z9rV4vczYXs",
	"LOVi5qZcbY3qRtYxp0SntcEkW1h09EqtuRnNSsvGMq/PMw8nxVmv1V8058sibFcmw06/NHRuXhrDy2qm",
	"u5qQxUbp1jeVKdGG+U2r2hncjdZ3/Rt5US8sxg+1TaYCHfdupsBxRms/z/MPlfvnk3z9hWbW+row09TO",
	"/QRdPsGrKXEeML6+K5p217zrXi4ns+7mzHTLDz3HvbpGvYJe7BcvS5uJkymhCzp6aj4U5KuSTdHkLNO4",
	"6GympJ/PtXu1XL3azQ6Iqk+cTqF08aJV7odapq++yvdu7rpqWaNledSt39bX1eVDrkS0UhmXy62TZ3VK",
	"aoMc6X2rjuRvWqnRpPe4asgnt7pRyJ6YtV61jMpXWpbCl3ZtVRmMShP8cvGyqKqGU9LHhW/0ckoq2YVp",
	"OgN10e4YlcqTalYb1bNVuyH35ZpZbD112q15p1ZhOqm2V/1Jpwbli6tK+7qot+3i1XJKLnO3k0bZvh4T",
	"tzUq5C46smjdXDVrmVX/oiN3arJWWTWYRQ2yPbl/manJ/YY8v2x1atnWlLDWjXl/VKvdafW6e3V3fVKf",
	"vVaHI/mktNbPygudVgdDuVqbz+3avHlR6ys1ud9/7dQrq5v+pD0l16tJrda/v+zIrVZ7tMiql3LpZl21",
	"lFaTTvJNF45rC9i6fbohA10p9JeTfHM5y99ulIbwAFMS8QFyty5PmnK2oBUnNPdiLa++fVs1nzbOrFg+",
	"ua2/vig5tNSuWnm9q6z6mRHM6VPi1rVVvkxfnyqvndHaOdmsjJfXDF7q5qs9WJSssj6+HTz0cHvgLvv0",
	"4iSvTYod9abh4pcVrHbrU9Ifq5PxbHitzGsN+aL5XFO6vfkMaeVmrlA0MtnVvJct1Gcn9ujyuqTcqPnL",
	"1/a6VUBXmeydewXvp+RbO9esLOnD1ZW7keUTpbfojWaF+rg31jbP1fuTm7xukYv72+t6uXfRlIu12+x9",
	"qeOMG3SxwvNca0pmm4v+8+p5+XTSfnnQ0DI7+0Zq9shcvhafB7dW3XaM/khDrSfcG8lXdyPbOGvBQuF6",
	"lbVL8GJjTAkelYat5cq+Kl7XFq3rh2uYUS6ub4rPThZbl3a3tvlmXY3G9+M2dcY3rZUybzQMcj3onPXk",
	"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",
	"yz3EYbotxdsP+oH+/fH9/wcAAP//oYXOOK1xAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
