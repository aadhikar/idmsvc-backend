// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
