// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
