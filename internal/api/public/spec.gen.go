// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
