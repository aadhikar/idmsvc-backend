// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
