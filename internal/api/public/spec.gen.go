// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
